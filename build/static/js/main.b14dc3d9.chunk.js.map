{"version":3,"sources":["components/loader/loader.js","routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","Nav","lazy","Cart","Home","Login","ProductDetail","Shop","Profile","Footer","Page404","Routes","fallback","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAOeA,G,MAJA,kBACX,yBAAKC,UAAU,UAAS,8BAAW,8BAAW,8BAAW,iCCAvDC,EAAMC,gBAAK,kBAAM,gCAEjBC,EAAOD,gBAAK,kBAAM,gCAClBE,EAAOF,gBAAK,kBAAM,gCAClBG,EAAQH,gBAAK,kBAAM,gCACnBI,EAAgBJ,gBAAK,kBAAM,iCAC3BK,EAAOL,gBAAK,kBAAM,gCAClBM,EAAUN,gBAAK,kBAAM,iCAErBO,EAASP,gBAAK,kBAAM,gCAEpBQ,EAAUR,gBAAK,kBAAM,gCAuBZS,EArBA,kBACX,kBAAC,IAAD,KACI,kBAAC,WAAD,CACIC,SAAU,kBAAC,EAAD,OAEV,kBAACX,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOU,KAAK,QAAQC,UAAWZ,IAC/B,kBAAC,IAAD,CAAOW,KAAK,SAASC,UAAWV,IAChC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,QAAQC,UAAWR,IACrC,kBAAC,IAAD,CAAOO,KAAK,YAAYC,UAAWT,IACnC,kBAAC,IAAD,CAAOQ,KAAK,WAAWC,UAAWP,IAElC,kBAAC,IAAD,CAAOM,KAAK,IAAID,OAAO,EAAME,UAAWL,KAE5C,kBAACD,EAAD,SC5BGO,EAFH,kBAAM,kBAAC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b14dc3d9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './loader.scss'\r\n\r\nconst Loader = () => (\r\n    <div className=\"loader\"><div></div><div></div><div></div><div></div></div>\r\n)\r\n\r\nexport default Loader;","import React, { Suspense, lazy } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Loader from '../components/loader/loader'\r\n\r\nconst Nav = lazy(() => import('../components/nav/nav'));\r\n\r\nconst Cart = lazy(() => import('../pages/cart/cart'));\r\nconst Home = lazy(() => import('../pages/home/home'));\r\nconst Login = lazy(() => import('../pages/login/login'));\r\nconst ProductDetail = lazy(() => import('../pages/product-detail/product-detail'));\r\nconst Shop = lazy(() => import('../pages/shop/shop'));\r\nconst Profile = lazy(() => import('../pages/profile/profile'));\r\n\r\nconst Footer = lazy(() => import('../components/footer/footer'));\r\n\r\nconst Page404 = lazy(() => import('../pages/page404/page404'));\r\n\r\nconst Routes = () => (\r\n    <Router>\r\n        <Suspense\r\n            fallback={<Loader />}\r\n        >\r\n            <Nav/>\r\n            <Switch>\r\n                <Route exact path='/' component={Home} />\r\n                <Route path='/cart' component={Cart} />\r\n                <Route path='/login' component={Login} />\r\n                <Route exact path='/shop' component={Shop} />\r\n                <Route path='/shop/:id' component={ProductDetail} />\r\n                <Route path='/profile' component={Profile} />\r\n\r\n                <Route path='*' exact={true} component={Page404} />\r\n            </Switch>\r\n            <Footer/>\r\n        </Suspense>\r\n    </Router>\r\n);\r\n\r\nexport default Routes;","import React from 'react';\r\nimport Routes from './routes/Routes'\r\n\r\nconst App = () => <Routes/>\r\n\r\nexport default App;\r\n\r\n\r\n// import LazyImage from './lazy-image';\r\n//         <LazyImage\r\n//           src=\"https://placehold.it/200x300?text=Image7\"\r\n//           alt=\"200x300\"\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/main.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}